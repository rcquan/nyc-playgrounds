(x - mean(x)) / sd(x)
(x - mean(x)) / sd(x)[1]
((x - mean(x)) / sd(x))[1]
((x - mean(x))/sd(x))[1]
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
((x - mean(x))/sd(x))[1]
rnorm(100, mean = 0, var = 1)
rnorm(100, mean = 0, sd = 1)
0.4 * 1.5
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
lm(y~x)
plot(fit)
line(fit)
plot(x,y)
line(fit)
line(fit$fitted)
fit <- lm(y~x)
line(fit$fitted)
plot(fit)
line(fit)
fit$fitted
abline(fit$fitted)
abline(fit)
plot(x,y)
abline(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
mean(x) * mean(w)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.18, 0.18, -1.54, rep(0.42, 3), 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x -1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
plot(x,y)
abline(fit)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
modelFit <- train(type ~.,data=trianing, method="glm")
modelFit
modelFit <- train(type ~.,data=training, method="glm")
modelFit
modelFit <- train(type ~.,data=training, method="glm")
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
library(caret)
modelFit <- train(type ~.,data=training, method="glm")
library(e1071)
install.packages("e1071")
set.seed(32343)
modelFit <- train(type ~.,data=training, method="glm")
modelFit
names(modelFit)
modelFit$finalmodel
modelFit$finalModel
install.packages("ISLR")
library(ISLR)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(training)
dim(testing)
library(ISLR)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]
test <- Wage[-inTrain,]
dim(training)
dim(training);dim(testing)
testing <- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[,c("age", "education","jobclass")],
y=training$wage, plot = "pairs")
qplot(age,wage, data = training)
qplot(age,wage, color = jobclass, data = training)
qq+ geom_smooth(method = "lm", formula = y~x)
qq <- qplot(age,wage, color = education, data = training)
qq+ geom_smooth(method = "lm", formula = y~x)
library(Hmisc)
install.packages("HMisc")
install.packages("Hmisc")
cutWage <- cut2(training$wage, g=3)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data = training, fill = cutWage)
p1
p1 <- qplot(cutWage, age, data = training, fill = cutWage,
geom = c("boxplot","jitter"))
p1
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,
p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve,main="",xlab="ave. capital run length")
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1], prComp$x[,2])
prComp$rotation
data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p = 0.5, list=FALSE)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
qplot(waiting, eruptions, data = faithful)
q + geom(lm(y~x))
q <- qplot(waiting, eruptions, data = faithful)
q + geom(lm(y~x))
q <- qplot(waiting, eruptions, data = faithful)
q + geoms(lm(y~x))
q + geom_smooth(method = "lm", formula = y~x)
lm1 <- lm(eruptions~waiting, data = trainFaith)
summary(lm1)
newdata <- data.frame(waiting=80)
predict(lm1, newdata)
modFit <- train(eruptions~waiting, data = trainFaith,
method = "lm")
summary(modFit)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
p=0.5, list=FALSE)
data(AlzheimerDisease)
adData<-data.frame(diagnosis,predictors)
View(adData)
View(adData)
adData<-data.frame(diagnosis,predictors)
inTrain <- createDataPartition(y="adData$diagnosis",
p=0.5, list=FALSE)
training <- adData[inTrain,]
testing <- adData[-inTrain,]
View(adData)
inTrain <- createDataPartition(y="adData$diagnosis",
p=0.5, list=FALSE)
View(adData)
rm(diagnosis)
inTrain <- createDataPartition(y="adData$diagnosis",
p=0.5, list=FALSE)
str(adData)
adData$diagnosis
inTrain <- createDataPartition(y=adData$diagnosis,
p=0.5, list=FALSE)
training <- adData[inTrain,]
testing <- adData[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
concrete$row.names
concrete$index
plot(training$CompressiveStrength)
qplot(training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col = "red")
plot(training$CompressiveStrength)
points(training$age = "red")
points(training$age, col= "red")
View(mixtures)
points(training$Age, col= "red")
points(training$Flyash, col = "green")
points(training$FlyAsh, col = "green")
View(training)
qplot(training$SuperPlasticizer)
qplot(SuperPlasticizer, data = training)
View(testing)
qplot(Superplasticizer, data = training)
log(training$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
colNames("adData")
colNames(adData)
colName(adData)
colnames(adData)
training[,c(58:69)]
thresh = 0.90)
pca <- preProcess(training[,c(58:69)], method = "pca",
thresh = 0.90)
summary(pca)
predict(pca)
adDataIL <- training[,c(58:69)]
preProc <- preProcess(adDataIL, method = "pca",
thresh = 0.90)
predict(preProc, adDataIL)
adDataIL <- training[,c(58:69)]
preProc <- preProcess(adDataIL, method = "pca",
thresh = 0.90)
adDataPC<-predict(preProc, adDataIL)
summary(adDataPC)
training <- training[,c(58:69)]
training <- training[,c(58:69)]
modelFit <- train(training, method = "lm")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
modelFit <- train(training, method = "lm")
modelFit <- train(y=training, method = "lm")
modelFit <- train(y=training$diagnosis~., method = "lm")
modelFit <- train(training$diagnosis~., method = "lm")
modelFit <- train(diagnosis~., data = training, method = "lm")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
modelFit <- train(diagnosis~., data = training, method = "lm")
modelFit <- train(training$diagnosis, method = "lm", data = training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
modelFit <- train(training$diagnosis, method = "lm", data = training)
modelFit <- train(training$diagnosis ~ ., method = "lm", data = training)
View(training)
modelFit <- train(diagnosis ~ ., method = "lm", data = training)
training <- training[,c(1, 58:69)]
View(training)
training <- training[,c(2, 58:69)]
View(training)
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(2, 58:69)]
View(training)
View(adData)
ibrary(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
colnames(training)
training <- training[,c(1, 58:69)]
View(training)
modelFit <- train(diagnosis ~ ., method = "lm", data = training)
modelFit <- train(training$diagnosis ~ ., method = "lm", data = training)
modelFit <- train(training$diagnosis ~ ., method = "glm", data = training)
summary(modelFit)
modelFit <- train(training$diagnosis ~ ., method = "lm", data = training)
modelFit <- train(diagnosis ~ ., method = "lm", data = training)
modelFit <- train(diagnosis ~ .,data = training, method = "lm")
modelFit <- train(diagnosis ~ .,data = training, method = "glm")
summary(modelFit)
training <- training[,c(58:69)]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
source('~/.active-rstudio-document', echo=TRUE)
modelFit <- train(training, diagnosis, method = "glm")
summary(modelFit)
modelFitPC <- train(trainingPC, diagnosis, method="glm")
preProc <- preProcess(training, method = "pca",
thresh = 0.80)
trainingPC <- predict(preProc, training)
modelFitPC <- train(trainingPC, diagnosis, method="glm")
modelFitPC <- train(trainingPC, diagnosis, method="glm")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
modelFit <- train(training, diagnosis, method = "glm")
summary(modelFit)
preProc <- preProcess(training, method = "pca",
thresh = 0.80)
trainingPC <- predict(preProc, training)
modelFitPC <- train(trainingPC, diagnosis, method="glm")
modelFit
modelFitPC
modelFitPC <- train(trainingPC, diagnosis, method="glm")
modelFitPC
View(training)
training <- training[,c(58:69)]
modelFit <- train(training, diagnosis, method = "glm")
modelFit
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[,c(58:69)]
modelFit <- train(training, diagnosis, method = "glm")
modelFit
preProc <- preProcess(training, method = "pca",
thresh = 0.80)
trainingPC <- predict(preProc, training)
modelFitPC <- train(trainingPC, diagnosis, method="glm")
modelFitPC
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
smallTraining <- training[,c(58:69)]
modelFit <- train(smallTraining, training$diagnosis, method = "glm")
modelFit
preProc <- preProcess(smallTraining, method = "pca",
thresh = 0.80)
trainingPC <- predict(preProc, smallTraining)
modelFitPC <- train(trainingPC, diagnosis, method="glm")
modelFitPC
trainingPC <- predict(preProc, smallTraining)
modelFitPC <- train(trainingPC, training$diagnosis, method="glm")
modelFitPC
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
smallTraining <- training[,c(58:69)]
modelFit <- train(smallTraining, training$diagnosis, method = "glm")
modelFit
preProc <- preProcess(smallTraining, method = "pca",
thresh = 0.80)
trainingPC <- predict(preProc, smallTraining)
modelFitPC <- train(trainingPC, training$diagnosis, method="glm")
modelFitPC
colnames(training)
View(training)
View(smallTraining)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
q()
library(ggvis)
cocaine %>%
filter(state == "NY") %>%
ggvis(~potency) %>%
layer_histograms(bindwidth == 2)
cocaine %>%
filter(state == "NY") %>%
ggvis(~potency) %>%
layer_histograms(binwidth == 2)
cocaine
cocaine %>%
filter(state == "NY") %>%
ggvis(~potency) %>%
layer_histogram(binwidth == 2)
cocaine %>%
filter(state == "NY") %>%
ggvis(~potency) %>%
layer_histograms(binwidth == 2)
cocaine %>%
filter(state == "NY") %>%
ggvis(~potency) %>%
layer_histograms(binwidth = 2)
state <- input_select(c(unique(cocaine$state)))
state <- c(unique(cocaine$state))
cocaine %>%
filter(state == input_select(state)) %>%
ggvis(~potency) %>%
layer_histograms(binwidth = 2)
cocaine %>%
filter(state == input_select(state())) %>%
ggvis(~potency) %>%
layer_histograms(binwidth = 2)
yo <- c(unique(cocaine$state))
cocaine %>%
filter(state == input_select(yo)) %>%
ggvis(~potency) %>%
layer_histograms(binwidth = 2)
mtcars %>% ggvis(~disp, ~mpg) %>%
filter(cyl > eval(input_slider(0, 10))) %>%
layer_points()
cocaine %>%
ggvis(~potency) %>%
filter(state == input_select(yo)) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == input_select(yo, select = "WA")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == input_select(yo, selected = "WA")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == input_select(
choices = c("WA", "CT"),
selected = "WA",
label = "State")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == input_select(
choices = c("WA", "CT"),
selected = "WA",
label = "State")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == input_radiobuttons(
choices = c("WA", "CT"),
selected = "WA",
label = "State")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == deparse(substitute(input_select(
choices = c("WA", "CT"),
selected = "WA",
label = "State")))) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(~state ==input_select(
choices = c("WA", "CT"),
selected = "WA",
label = "State")) %>%
layer_histograms(binwidth = 2)
cocaine %>%
ggvis(~potency) %>%
filter(state == eval(input_select(
choices = c("WA", "CT"),
selected = "WA",
label = "State"))) %>%
layer_histograms(binwidth = 2)
state <- c(unique(cocaine$state))
cocaine %>%
ggvis(~potency) %>%
filter(state == eval(input_select(
choices = state,
selected = "WA",
label = "State"))) %>%
layer_histograms(binwidth = 2)
source('~/GitHub/nyc-playgrounds/nyc-playgrounds.R', echo=TRUE)
library(XML)
library(maptools)
library(ggplot2)
library(gpclib)
library(dplyr)
library(sp)
library(rgdal)
library(ggmap)
setwd("/Users/Quan/GitHub/nyc-playgrounds/")
# http://nycdata.pediacities.com/dataset/median-household-income-2010-census-tracts/resource/0d27954a-6e01-4a83-8e9e-1ad7f043d35a
## reading data
doc <- xmlParse("http://www.nycgovparks.org/bigapps/DPR_Playgrounds_001.xml")
playgrounds <- xmlToDataFrame(doc, stringsAsFactors = FALSE)
View(playgrounds)
playgrounds <- playgrounds %>%
filter(lat != "") %>%
mutate(lat = as.numeric(lat),
lon = as.numeric(lon))
setwd("~/GitHub/nyc-playgrounds")
write.csv(playgrounds, "nyc_playgrounds.csv")
